{"name": "To verify delete posts service record ", "status": "failed", "statusDetails": {"message": "AssertionError: AssertionError('Delete operation failed\n  assert False',)\nassert False", "trace": "id = 1\n\n    @allure.title(\"To verify delete posts service record \")\n    @pytest.mark.parametrize(\"id\", parametrizeData())\n    def test_delete_posts_verify_data(id):\n        try:\n            # Calling delete_post_service by passing an id\n            response = delete_post_service.delete_post(id)\n            # log the response data for the api\n            log_response_data.from_reponse('delete_post', response)\n            # Check for deleted id by calling the get single post service\n            get_response = get_one_posts_service.get_post_by_id(id)\n            # As for perfect delete id should not be present and we would get 404 error\n            if get_response.status_code == 404:\n                # if status is 404, pass the test case\n                logger.info(\"test_delete_posts_verify_data is Passed\")\n                assert True\n            else:\n                # if status is not 404, fail the test case\n                logger.error(f'test_delete_posts_verify_data is Failed')\n>               assert False, \"Delete operation failed\"\nE               AssertionError: Delete operation failed\nE               assert False\n\ntest/test_delete_posts_service.py:51: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nid = 1\n\n    @allure.title(\"To verify delete posts service record \")\n    @pytest.mark.parametrize(\"id\", parametrizeData())\n    def test_delete_posts_verify_data(id):\n        try:\n            # Calling delete_post_service by passing an id\n            response = delete_post_service.delete_post(id)\n            # log the response data for the api\n            log_response_data.from_reponse('delete_post', response)\n            # Check for deleted id by calling the get single post service\n            get_response = get_one_posts_service.get_post_by_id(id)\n            # As for perfect delete id should not be present and we would get 404 error\n            if get_response.status_code == 404:\n                # if status is 404, pass the test case\n                logger.info(\"test_delete_posts_verify_data is Passed\")\n                assert True\n            else:\n                # if status is not 404, fail the test case\n                logger.error(f'test_delete_posts_verify_data is Failed')\n                assert False, \"Delete operation failed\"\n        except Exception as e:\n            # Mark the test case failed in case any Exception and log the whole details\n            logger.error(f'test_delete_posts_verify_data is Failed')\n            logger.error(f'Error message is: {e}')\n>           assert False, e\nE           AssertionError: AssertionError('Delete operation failed\nE             assert False',)\nE           assert False\n\ntest/test_delete_posts_service.py:56: AssertionError"}, "steps": [{"name": "Calling DELETE POSTS API with id: 1 ", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1627459754004, "stop": 1627459754005}, {"name": "Log request Data for service 'delete_posts'", "status": "passed", "parameters": [{"name": "url", "value": "'https://jsonplaceholder.typicode.com/posts/1'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'delete_posts'"}], "start": 1627459754005, "stop": 1627459754006}], "parameters": [{"name": "id", "value": "1"}], "start": 1627459754004, "stop": 1627459754615}, {"name": "Log response Data for service 'delete_post'", "status": "passed", "parameters": [{"name": "service_name", "value": "'delete_post'"}, {"name": "response", "value": "<Response [200]>"}], "start": 1627459754615, "stop": 1627459754618}, {"name": "Calling GET POST API by id : 1", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1627459754619, "stop": 1627459754621}, {"name": "Log request Data for service 'get_post_by_id'", "status": "passed", "parameters": [{"name": "url", "value": "'https://jsonplaceholder.typicode.com/posts/1'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'get_post_by_id'"}], "start": 1627459754621, "stop": 1627459754623}], "parameters": [{"name": "id", "value": "1"}], "start": 1627459754619, "stop": 1627459754722}], "attachments": [{"name": "log", "source": "8a492922-6d2e-4ee4-8c3e-1d0184e767d7-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "e22855c9-35f7-4bfc-bf06-a7021348b1b2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "id", "value": "1"}], "start": 1627459754004, "stop": 1627459754726, "uuid": "42585c9e-4099-4620-87af-7f4f518f92ac", "historyId": "cb8eb69a3695484ba89d374fb3cba94b", "testCaseId": "4376182fd621ead45ba928fad07d1965", "fullName": "test.test_delete_posts_service#test_delete_posts_verify_data", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_delete_posts_service"}, {"name": "host", "value": "LPBR394-NITINSINGH"}, {"name": "thread", "value": "28179-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_delete_posts_service"}]}