{"name": "To verify record created for create posts service ", "status": "failed", "statusDetails": {"message": "AssertionError: AssertionError('Record not updated for the post service\n  assert False',)\nassert False", "trace": "@allure.title(\"To verify record created for create posts service \")\n    def test_create_new_post_verify_post_created():\n        try:\n            # calling the create_posts_service\n            response = post_create_posts_service.create_new_post()\n            # logging the response data in logger\n            log_response_data.from_reponse('create_posts_service', response)\n            # extracting the id\n            id = response.json()['id']\n            # calling the get one post service by id\n            get_response = get_one_posts_service.get_post_by_id(id)\n            # logging the data for get one post service by id\n            log_response_data.from_reponse('get_one_posts_service', get_response)\n            if get_response.status_code == 200:\n                # Assert the post and get api request and response body data for validation\n                get_title = get_response.json()['title']\n                get_body = get_response.json()['body']\n                data = json.loads(read_json.readfile(\"create_new_post.json\"))\n                post_title = data['title']\n                post_body = data['body']\n    \n                assert post_body == get_body\n                assert post_title == get_title\n                logger.info(f'test_create_new_post_verify_post_created is Passed')\n            else:\n                # if get_one_posts_service response is other than 200 for newly created id, then mark test case as failed\n                logger.error(f'test_create_new_post_verify_post_created is Failed')\n>               assert False, 'Record not updated for the post service'\nE               AssertionError: Record not updated for the post service\nE               assert False\n\ntest/test_create_new_posts_service.py:75: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"To verify record created for create posts service \")\n    def test_create_new_post_verify_post_created():\n        try:\n            # calling the create_posts_service\n            response = post_create_posts_service.create_new_post()\n            # logging the response data in logger\n            log_response_data.from_reponse('create_posts_service', response)\n            # extracting the id\n            id = response.json()['id']\n            # calling the get one post service by id\n            get_response = get_one_posts_service.get_post_by_id(id)\n            # logging the data for get one post service by id\n            log_response_data.from_reponse('get_one_posts_service', get_response)\n            if get_response.status_code == 200:\n                # Assert the post and get api request and response body data for validation\n                get_title = get_response.json()['title']\n                get_body = get_response.json()['body']\n                data = json.loads(read_json.readfile(\"create_new_post.json\"))\n                post_title = data['title']\n                post_body = data['body']\n    \n                assert post_body == get_body\n                assert post_title == get_title\n                logger.info(f'test_create_new_post_verify_post_created is Passed')\n            else:\n                # if get_one_posts_service response is other than 200 for newly created id, then mark test case as failed\n                logger.error(f'test_create_new_post_verify_post_created is Failed')\n                assert False, 'Record not updated for the post service'\n        except Exception as e:\n            # In case any exception, mark the test case as failed and logged the exception\n            logger.error(f'test_create_new_post_verify_post_created is Failed')\n            logger.error(f'Error is: {e}')\n>           assert False, e\nE           AssertionError: AssertionError('Record not updated for the post service\nE             assert False',)\nE           assert False\n\ntest/test_create_new_posts_service.py:80: AssertionError"}, "steps": [{"name": "Calling CREATE NEW POST API ", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1627459752673, "stop": 1627459752674}, {"name": "reading the json from file : 'create_new_post.json' with dictionary: None", "status": "passed", "parameters": [{"name": "filename", "value": "'create_new_post.json'"}, {"name": "d", "value": "None"}], "start": 1627459752674, "stop": 1627459752674}, {"name": "Log request Data for service 'create_new_post'", "status": "passed", "parameters": [{"name": "url", "value": "'https://jsonplaceholder.typicode.com/posts'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'create_new_post'"}], "start": 1627459752674, "stop": 1627459752675}], "start": 1627459752673, "stop": 1627459753281}, {"name": "Log response Data for service 'create_posts_service'", "status": "passed", "parameters": [{"name": "service_name", "value": "'create_posts_service'"}, {"name": "response", "value": "<Response [201]>"}], "start": 1627459753281, "stop": 1627459753282}, {"name": "Calling GET POST API by id : 101", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1627459753282, "stop": 1627459753283}, {"name": "Log request Data for service 'get_post_by_id'", "status": "passed", "parameters": [{"name": "url", "value": "'https://jsonplaceholder.typicode.com/posts/101'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'get_post_by_id'"}], "start": 1627459753283, "stop": 1627459753283}], "parameters": [{"name": "id", "value": "101"}], "start": 1627459753282, "stop": 1627459753352}, {"name": "Log response Data for service 'get_one_posts_service'", "status": "passed", "parameters": [{"name": "service_name", "value": "'get_one_posts_service'"}, {"name": "response", "value": "<Response [404]>"}], "start": 1627459753352, "stop": 1627459753353}], "attachments": [{"name": "log", "source": "5a2c8aeb-e7ec-4a13-b186-c04a714911b3-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "3d985642-dad5-4aa9-bf14-f0d0068df748-attachment.txt", "type": "text/plain"}], "start": 1627459752673, "stop": 1627459753353, "uuid": "6287bbe0-f185-4bea-90a5-2b479b690e99", "historyId": "0eacd689dce47f770d294683f8273569", "testCaseId": "6f5cbaf652e91cf49bd402a85bfdf4a9", "fullName": "test.test_create_new_posts_service#test_create_new_post_verify_post_created", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_create_new_posts_service"}, {"name": "host", "value": "LPBR394-NITINSINGH"}, {"name": "thread", "value": "28179-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_create_new_posts_service"}]}